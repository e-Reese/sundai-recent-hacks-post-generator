"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/generate-post";
exports.ids = ["pages/api/generate-post"];
exports.modules = {

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./pages/api/generate-post.js":
/*!************************************!*\
  !*** ./pages/api/generate-post.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n// API route to handle post generation\n\n\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { date  } = req.body;\n    if (!date) {\n        return res.status(400).json({\n            error: \"Date is required\"\n        });\n    }\n    try {\n        // Path to the main.py script in the src directory\n        const scriptPath = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(process.cwd(), \"main.py\");\n        // Make sure the script exists\n        if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(scriptPath)) {\n            return res.status(500).json({\n                error: `Script not found at ${scriptPath}`\n            });\n        }\n        // Output file path for the generated post (in the root directory)\n        const outputFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(process.cwd(), `../linkedin_post_${date.replace(/-/g, \"_\")}.txt`);\n        // Run the Python script with the specified date and dry-run flag\n        // Use --mock flag to avoid OpenAI API dependency\n        const pythonProcess = (0,child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)(\"python3\", [\n            scriptPath,\n            \"--date\",\n            date,\n            \"--dry-run\" // Don't post to LinkedIn, just generate the post\n        ]);\n        let dataString = \"\";\n        let errorString = \"\";\n        // Collect data from stdout\n        pythonProcess.stdout.on(\"data\", (data)=>{\n            dataString += data.toString();\n        });\n        // Collect errors from stderr\n        pythonProcess.stderr.on(\"data\", (data)=>{\n            errorString += data.toString();\n        });\n        // Handle process completion\n        pythonProcess.on(\"close\", (code)=>{\n            if (code !== 0) {\n                console.error(`Python script exited with code ${code}`);\n                console.error(`Error: ${errorString}`);\n                // If we get a Python module error, generate a mock post directly in JavaScript\n                if (errorString.includes(\"ModuleNotFoundError\") || errorString.includes(\"No module named\")) {\n                    console.log(\"Python module error detected, generating mock post in JavaScript\");\n                    const today = new Date();\n                    const formattedDate = date || today.toISOString().split(\"T\")[0];\n                    // Generate a simple mock post\n                    const mockPost = `ðŸš€ Exciting projects from our Sundai community on ${formattedDate}! \n\nToday, our talented members created several innovative projects including \"AI Assistant\", \"Data Visualization Tool\", and \"Smart Home Automation\".\n\nThese projects showcase the creativity and technical skills of our community members, ranging from AI tools to productivity enhancers.\n\nCheck out these amazing projects through Sundai and see how our community continues to push the boundaries of technology!\n\n#Sundai #TechCommunity #Innovation #AI #BuildInPublic`;\n                    // Try to write the mock post to the output file\n                    try {\n                        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(outputFilePath, mockPost);\n                    } catch (writeError) {\n                        console.log(`Could not write mock post to file: ${writeError.message}`);\n                    // Continue anyway since we'll return the mock post directly\n                    }\n                    return res.status(200).json({\n                        success: true,\n                        generatedPost: mockPost,\n                        note: \"Generated JavaScript mock post due to Python module error\"\n                    });\n                }\n                return res.status(500).json({\n                    error: \"Failed to generate post\",\n                    details: errorString || \"Unknown error\"\n                });\n            }\n            // Check if the output file was created\n            if (fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(outputFilePath)) {\n                try {\n                    // Read the generated post from the file\n                    const generatedPost = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(outputFilePath, \"utf8\");\n                    return res.status(200).json({\n                        success: true,\n                        generatedPost: generatedPost\n                    });\n                } catch (readError) {\n                    console.error(`Error reading output file: ${readError}`);\n                    return res.status(500).json({\n                        error: \"Failed to read generated post\",\n                        details: readError.message\n                    });\n                }\n            } else {\n                console.error(\"Output file not found after script execution\");\n                return res.status(500).json({\n                    error: \"Generated post file not found\",\n                    details: dataString || \"No output from script\"\n                });\n            }\n        });\n    } catch (error) {\n        console.error(`Error running Python script: ${error}`);\n        return res.status(500).json({\n            error: \"Internal server error\",\n            details: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/generate-post.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/generate-post.js"));
module.exports = __webpack_exports__;

})();